#!/usr/bin/env python3

import json
import os
import subprocess


def get_nodes(node_list, a):
    if "nodes" in a:
        for n in a["nodes"]:
            get_nodes(node_list, n)
    if a["type"] == "con" and a.get("name"):
        node_list.append(a)

def get_windows():
    command=["swaymsg", "-t", "get_tree"]
    process = subprocess.run(command, capture_output=True, text=True)
    data = json.loads(process.stdout)
    windows = []
    get_nodes(windows, data)
    return windows

def get_desktop_files():
    files = []
    paths = [
            "/usr/share/applications/",
            "/usr/local/share/applications/",
            "/var/lib/snapd/desktop/applications/",
            os.path.expanduser("~/.local/share/applications/")
            ]
    for path in paths:
        with os.scandir(path) as path_it:
            for entry in path_it:
                if entry.is_file() and entry.name.endswith(".desktop"):
                    with open(entry, "r") as e:
                        files.append((entry, e.read()))
    return files

def resolve_desktop_file_data(name, desktop_files):
    for df, content in desktop_files:
        if name in content:
            app_name, icon = "", ""
            for line in content.splitlines():
                if not icon and line.startswith("Icon="):
                    _, icon = line.split("=", 1)
                if not app_name and line.startswith("Name="):
                    _, app_name = line.split("=", 1)
            return app_name, icon 
    return name, name

def normalize_names(window):
    app_name = ""
    if window["app_id"]:
        app_name = window["app_id"]
    else:
        app_name = window.get("window_properties", {}).get("class", "")

    title = window["name"].strip()
    app_name = app_name.strip()
    
    return app_name, title

def parse_window_data(windows, desktop_files):
    parsed_windows = []
    for window in windows:
        app_name, title = normalize_names(window)
        app_name, icon = resolve_desktop_file_data(app_name, desktop_files)
        parsed_windows.append({
                "id": window["id"],
                "app": app_name,
                "icon": icon,
                "title": title
                })
    return parsed_windows

def build_rofi_string(windows):
    return "\n".join([f'{w["app"]:<20}\t{w["title"]}\0icon\x1f{w["icon"]}\x1finfo\x1f{w["id"]}' for w in windows])


if __name__ == "__main__":
    info = os.environ.get("ROFI_INFO")
    if info:
        subprocess.run(["swaymsg", f"[con_id={info}]", "focus"], capture_output=True)
    else:
        desktop_files = get_desktop_files()
        parsed_windows = parse_window_data(get_windows(), desktop_files)
        print(build_rofi_string(parsed_windows))
