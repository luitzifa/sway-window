#!/usr/bin/env python3

import json
import os
import subprocess


def get_nodes(node_list, a):
    if "nodes" in a:
        for n in a["nodes"]:
            get_nodes(node_list, n)
    if a["type"] == "con" and a.get("name"):
        node_list.append(a)

def get_windows():
    command=["swaymsg", "-t", "get_tree"]
    process = subprocess.run(command, capture_output=True, text=True)
    data = json.loads(process.stdout)
    windows = []
    get_nodes(windows, data)
    return windows

def normalize_names(window):
    app_name = ""
    if window["app_id"]:
        app_name = window["app_id"]
    else:
        app_name = window.get("window_properties", {}).get("class", "")

    title = window["name"].strip()
    app_name = app_name.strip()
    icon = app_name
    
    if app_name.startswith("chrome-") and app_name.endswith("-Default"):
        app_name, title = title.split(" - ", 1)
    return app_name.strip(), title.strip(), icon

def parse_windows(windows):
    parsed_windows = []
    for window in windows:
        app_name, title, icon = normalize_names(window)
        parsed_windows.append({
                "id": window["id"],
                "app": app_name,
                "icon": icon,
                "title": title
                })
    return parsed_windows

def build_rofi_string(windows):
    return "\n".join([f'{w["app"]:<20}\t{w["title"]}\0icon\x1f{w["icon"]}\x1finfo\x1f{w["id"]}' for w in windows])


if __name__ == "__main__":
    info = os.environ.get("ROFI_INFO")
    if info:
        subprocess.run(["swaymsg", f"[con_id={info}]", "focus"], capture_output=True)
    else:
        print(build_rofi_string(parse_windows(get_windows())))
